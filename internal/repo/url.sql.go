// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: url.sql

package repo

import (
	"context"
	"time"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls(original_url,
                 short_code,
                 is_custom,
                 expired_time)
VALUES ($1, $2, $3, $4)
returning id, original_url, short_code, is_custom, expired_time, create_time
`

type CreateURLParams struct {
	OriginalUrl string    `json:"original_url"`
	ShortCode   string    `json:"short_code"`
	IsCustom    bool      `json:"is_custom"`
	ExpiredTime time.Time `json:"expired_time"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.IsCustom,
		arg.ExpiredTime,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.IsCustom,
		&i.ExpiredTime,
		&i.CreateTime,
	)
	return i, err
}

const deleteURLExpired = `-- name: DeleteURLExpired :exec
DELETE FROM urls
WHERE expired_time<CURRENT_TIMESTAMP
`

func (q *Queries) DeleteURLExpired(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteURLExpired)
	return err
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT id, original_url, short_code, is_custom, expired_time, create_time FROM urls
where short_code=$1
AND expired_time>CURRENT_TIMESTAMP
`

func (q *Queries) GetURLByShortCode(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByShortCode, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.IsCustom,
		&i.ExpiredTime,
		&i.CreateTime,
	)
	return i, err
}

const isShortCodeAvailable = `-- name: IsShortCodeAvailable :one
SELECT NOT EXISTS(
    SELECT 1 FROM urls
             WHERE short_code=$1
)AS is_available
`

func (q *Queries) IsShortCodeAvailable(ctx context.Context, shortCode string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isShortCodeAvailable, shortCode)
	var is_available bool
	err := row.Scan(&is_available)
	return is_available, err
}
